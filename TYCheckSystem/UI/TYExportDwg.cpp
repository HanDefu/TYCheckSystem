//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Projects\WeiTang\Src\TYCheckSystem\Install\application\TYExportDwg.cpp
//
//        This file was generated by the NX Block Styler
//        Created by: Administrator
//              Version: NX 7
//              Date: 10-25-2019  (Format: mm-dd-yyyy)
//              Time: 18:19 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "TYExportDwg.hpp"
#include <uf_draw.h>
#include <uf_assem.h>
#include <uf_part.h>
#include <uf_obj.h>
#include "../Common/Com_UG.h"
#include "../Common/Com_UI.h"
#include <NXOpen/NXObjectManager.hxx>
#include <NXOpen/Part.hxx>
#include <uf_drf.h>


using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(TYExportDwg::theSession) = NULL;
UI *(TYExportDwg::theUI) = NULL;

//------------------------------------------------------------------------------
// Declaration of global variables
//------------------------------------------------------------------------------
TYExportDwg *theTYExportDwg;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
TYExportDwg::TYExportDwg()
{
    try
    {
        // Initialize the NX Open C++ API environment
        TYExportDwg::theSession = NXOpen::Session::GetSession();
        TYExportDwg::theUI = UI::GetUI();
        theDialogName = "TYExportDwg.dlx";
        theDialog = TYExportDwg::theUI->CreateDialog(theDialogName.c_str());
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &TYExportDwg::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &TYExportDwg::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &TYExportDwg::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &TYExportDwg::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &TYExportDwg::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
TYExportDwg::~TYExportDwg()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}

void  TYExportDwg_Main()
{
    try
    {
        theTYExportDwg = new TYExportDwg();
        // The following method shows the dialog immediately
        theTYExportDwg->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        TYExportDwg::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    delete theTYExportDwg;
}


int TYExportDwg::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        TYExportDwg::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void TYExportDwg::initialize_cb()
{
    try
    {
        groupSetting = theDialog->TopBlock()->FindBlock("groupSetting");
        exportFolder = theDialog->TopBlock()->FindBlock("exportFolder");

		char filePath[MAX_FSPEC_SIZE] = "";
		char namestr[MAX_FSPEC_SIZE] = "";
		char part_fspec1[MAX_FSPEC_SIZE] = "";
		tag_t disp = UF_PART_ask_display_part();
		UF_PART_ask_part_name(disp,part_fspec1);
		uc4576(part_fspec1, 2, filePath,namestr);

		strcat(filePath, "\\");
		UI_FilePathSetValue(exportFolder, filePath);
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        TYExportDwg::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void TYExportDwg::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        TYExportDwg::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int TYExportDwg::apply_cb()
{
    try
    {
		vtag_t allBodies;
		vNXString fileNames;
		NXString path;
		UI_FilePathGetValue(exportFolder, path);
		if (path.getLocaleText() == 0 || strlen(path.getLocaleText()) == 0 )
		{
			uc1601("请设置导出路径",1);
			return -1;
		}

		
		tag_p_t drawing_tags;
		int num_drawings = 0;
		UF_DRAW_ask_drawings( &num_drawings, &drawing_tags);

		tag_t *child_part_occs = 0;
		tag_t disp = UF_PART_ask_display_part();
		tag_t rootocc = UF_ASSEM_ask_root_part_occ(disp);
		int n = UF_ASSEM_ask_part_occ_children(rootocc, &child_part_occs);
		int ret = 0;

		char part_fspec[MAX_FSPEC_SIZE+1] = "";
		UF_PART_ask_part_name(disp, part_fspec);
		for (int i = 0; i < num_drawings; i++)
		{
			char name[64] = "";
			UF_OBJ_ask_name(drawing_tags[i], name);

			if (n > 0)
				ret = UF_ASSEM_replace_refset(1,&child_part_occs[0],name);

			UF_DRAW_open_drawing(drawing_tags[i]);
			UF_DRAW_upd_out_of_date_views(drawing_tags[i]);

			Part *part1(dynamic_cast<Part *>(NXOpen::NXObjectManager::Get(TYCOM_Prototype(child_part_occs[0]))));
			bool loadStatus1;
			loadStatus1 = part1->IsFullyLoaded();
			if( !loadStatus1 )
				part1->LoadFully();

			UF_DISP_regenerate_display();
			//UF_DISP_regenerate_view();
			//UF_MODL_update();
			//UF_MODL_update_all_features();

			//ret = UF_DRF_update_views(name,UF_DRF_UPDATE_ALL,"");

			NXString dwgFileName = path + name + NXString(".dwg");
			
			TYCOM_ExportSheetToAcadDwg( part_fspec, dwgFileName.getLocaleText(), NXString(name) );
		}

    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        TYExportDwg::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int TYExportDwg::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == exportFolder)
        {
        //---------Enter your code here-----------
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        TYExportDwg::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int TYExportDwg::ok_cb()
{
    try
    {
        apply_cb();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        TYExportDwg::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}
