//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Projects\WeiTang\Src\TYCheckSystem\Install\application\TYExport.cpp
//
//        This file was generated by the NX Block Styler
//        Created by: Administrator
//              Version: NX 7
//              Date: 10-23-2019  (Format: mm-dd-yyyy)
//              Time: 08:18 (Format: hh-mm)
//
//==============================================================================

#include "TYExport3D.hpp"
#include "../Common/Com_UI.h"
#include <uf_part.h>
#include "../Common/Com_UG.h"
#include "../Common/Com_Attribute.h"
#include "../Common/Com_Export.h"

using namespace NXOpen;
using namespace NXOpen::BlockStyler;

Session *(TYExport3D::theSession) = NULL;

UI *(TYExport3D::theUI) = NULL;

TYExport3D *theTYExport;

TYExport3D::TYExport3D()
{
    try
    {
        // Initialize the NX Open C++ API environment
        TYExport3D::theSession = NXOpen::Session::GetSession();
        TYExport3D::theUI = UI::GetUI();
        theDialogName = "TYExport.dlx";
        theDialog = TYExport3D::theUI->CreateDialog(theDialogName.c_str());
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &TYExport3D::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &TYExport3D::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &TYExport3D::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &TYExport3D::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &TYExport3D::dialogShown_cb));

		uc1601("建议本功能在BOM之后使用",1);
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
TYExport3D::~TYExport3D()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}

void  TYExport_Main()
{
    try
    {
        theTYExport = new TYExport3D();
        // The following method shows the dialog immediately
        theTYExport->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        TYExport3D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    delete theTYExport;
}


int TYExport3D::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        TYExport3D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

void TYExport3D::initialize_cb()
{
    try
    {
        groupSetting = theDialog->TopBlock()->FindBlock("groupSetting");
        enumFormat = theDialog->TopBlock()->FindBlock("enumFormat");
        exportFolder = theDialog->TopBlock()->FindBlock("exportFolder");
		toggleExportAll = theDialog->TopBlock()->FindBlock("toggleExportAll");
		selectionBodies = theDialog->TopBlock()->FindBlock("selectionBodies");

		UI_SetShow(enumFormat,false);

		char filePath[MAX_FSPEC_SIZE] = "";
		char namestr[MAX_FSPEC_SIZE] = "";
		char part_fspec1[MAX_FSPEC_SIZE] = "";
		tag_t disp = UF_PART_ask_display_part();
		UF_PART_ask_part_name(disp,part_fspec1);
		uc4576(part_fspec1, 2, filePath,namestr);
		
		UI_FilePathSetValue(exportFolder, filePath);

		UI_SetSeletSolidBody(selectionBodies);

    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        TYExport3D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}


void TYExport3D::dialogShown_cb()
{
    try
    {
		UI_LogicalSetValue(toggleExportAll, true);
		UI_SetShow(selectionBodies,false);
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        TYExport3D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}


int TYExport3D::apply_cb()
{
    try
    {
		vtag_t allBodies;
		vNXString fileNames;
		NXString path;
		UI_FilePathGetValue(exportFolder, path);
		if (path.getLocaleText() == 0 || strlen(path.getLocaleText()) == 0 )
		{
			uc1601("请设置导出路径",1);
			return -1;
		}

		bool exportAll = false;
		UI_LogicalGetValue(toggleExportAll, exportAll);

		//第二步得到所有的实体并创建引用集
		//注意威唐只要出小于150层的实体
		vtag_t partBodies;
		if (exportAll)
			TYCOM_GetCurrentPartSolidBodies(partBodies);
		else
			partBodies = UI_GetSelectObjects2(selectionBodies);

		int layer = 0;
		for (int i = 0; i < partBodies.size(); i++)
		{
			layer = TYCOM_GetObjectLayer(partBodies[i]);
			if (layer < 150)
			{
				NXString dwgno;
				TYCOM_GetObjectStringAttribute( partBodies[i] , TY_ATTR_DRAWING_NO , dwgno);
				if (dwgno.getLocaleText() != 0 && strlen(dwgno.getLocaleText()) > 0 )
				{
                    fileNames.push_back(path + NXString("\\") + dwgno + NXString(".stp"));
				}
				else
				{
					char str[32] = "";
					sprintf(str, "export_body_%d",i);
					fileNames.push_back(path + NXString("\\") + NXString(str) + NXString(".stp"));
				}
					
				allBodies.push_back(partBodies[i]);
			}
		}

		TYCOM_Export_step203(allBodies,fileNames);
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        TYExport3D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

int TYExport3D::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
		if(block == toggleExportAll)
		{
			bool exportAll = false;
			UI_LogicalGetValue(toggleExportAll, exportAll);
			if (exportAll)
				UI_SetShow(selectionBodies,false);
			else
				UI_SetShow(selectionBodies,true);
		}
		else if(block == selectionBodies)
		{
			//---------Enter your code here-----------
		}
		else if(block == enumFormat)
		{
			//---------Enter your code here-----------
		}
		else if(block == exportFolder)
		{
			//---------Enter your code here-----------
		}
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        TYExport3D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}


int TYExport3D::ok_cb()
{
    try
    {
        apply_cb();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        TYExport3D::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}
