//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Project\WetTang\Src\WeiTang\install\application\TYStandPart.cpp
//
//        This file was generated by the NX Block Styler
//        Created by: Administrator
//              Version: NX 7
//              Date: 07-28-2019  (Format: mm-dd-yyyy)
//              Time: 18:57 (Format: hh-mm)
//
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "TYStandPart.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(TYStandPart::theSession) = NULL;
UI *(TYStandPart::theUI) = NULL;

//------------------------------------------------------------------------------
// Declaration of global variables
//------------------------------------------------------------------------------
TYStandPart *theTYStandPart;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
TYStandPart::TYStandPart()
{
	try
	{
		// Initialize the NX Open C++ API environment
		TYStandPart::theSession = NXOpen::Session::GetSession();
		TYStandPart::theUI = UI::GetUI();
		theDialogName = "TYStandPart.dlx";
		theDialog = TYStandPart::theUI->CreateDialog(theDialogName.c_str());
		// Registration of callback functions
		theDialog->AddApplyHandler(make_callback(this, &TYStandPart::apply_cb));
		theDialog->AddOkHandler(make_callback(this, &TYStandPart::ok_cb));
		theDialog->AddUpdateHandler(make_callback(this, &TYStandPart::update_cb));
		theDialog->AddCancelHandler(make_callback(this, &TYStandPart::cancel_cb));
		theDialog->AddFilterHandler(make_callback(this, &TYStandPart::filter_cb));
		theDialog->AddInitializeHandler(make_callback(this, &TYStandPart::initialize_cb));
		theDialog->AddDialogShownHandler(make_callback(this, &TYStandPart::dialogShown_cb));
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		throw;
	}
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
TYStandPart::~TYStandPart()
{
	if (theDialog != NULL)
	{
		delete theDialog;
		theDialog = NULL;
	}
}



int TYStandPart::Show()
{
	try
	{
		theDialog->Show();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYStandPart::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}


//------------------------------------------------------------------------------
//Method name: Show_TYStandPart
//------------------------------------------------------------------------------
void TYStandPart::Show_TYStandPart()
{
	try
	{
		theTYStandPart = new TYStandPart();
		// The following method shows the dialog immediately
		theTYStandPart->Show();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYStandPart::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	delete theTYStandPart;
}


//------------------------------------------------------------------------------
//---------------------Block Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void TYStandPart::initialize_cb()
{
	try
	{
		groupSearch = theDialog->TopBlock()->FindBlock("groupSearch");
		stringKey = theDialog->TopBlock()->FindBlock("stringKey");
		buttonSearch = theDialog->TopBlock()->FindBlock("buttonSearch");
		listSearchResult = dynamic_cast<NXOpen::BlockStyler::ListBox* >(theDialog->TopBlock()->FindBlock("listSearchResult"));
		groupClass = theDialog->TopBlock()->FindBlock("groupClass");
		enumMainClass = theDialog->TopBlock()->FindBlock("enumMainClass");
		enumSubClass = theDialog->TopBlock()->FindBlock("enumSubClass");
		listParts = dynamic_cast<NXOpen::BlockStyler::ListBox* >(theDialog->TopBlock()->FindBlock("listParts"));
		groupLegend = theDialog->TopBlock()->FindBlock("groupLegend");
		labelLegend = theDialog->TopBlock()->FindBlock("labelLegend");
		groupParameter = theDialog->TopBlock()->FindBlock("groupParameter");
		listParmeters = dynamic_cast<NXOpen::BlockStyler::ListBox* >(theDialog->TopBlock()->FindBlock("listParmeters"));
		doublePara = theDialog->TopBlock()->FindBlock("doublePara");
		enumNoKeyinPara = theDialog->TopBlock()->FindBlock("enumNoKeyinPara");
		groupPosition = theDialog->TopBlock()->FindBlock("groupPosition");
		csysPos = theDialog->TopBlock()->FindBlock("csysPos");
		groupSetting = theDialog->TopBlock()->FindBlock("groupSetting");
		toggleSubtract = theDialog->TopBlock()->FindBlock("toggleSubtract");
		togglePreview = theDialog->TopBlock()->FindBlock("togglePreview");
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYStandPart::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void TYStandPart::dialogShown_cb()
{
	try
	{
		//---- Enter your callback code here -----
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYStandPart::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int TYStandPart::apply_cb()
{
	try
	{
		//---- Enter your callback code here -----
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYStandPart::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int TYStandPart::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
	try
	{
		if(block == stringKey)
		{
			//---------Enter your code here-----------
		}
		else if(block == buttonSearch)
		{
			//---------Enter your code here-----------
		}
		else if(block == listSearchResult)
		{
			//---------Enter your code here-----------
		}
		else if(block == enumMainClass)
		{
			//---------Enter your code here-----------
		}
		else if(block == enumSubClass)
		{
			//---------Enter your code here-----------
		}
		else if(block == listParts)
		{
			//---------Enter your code here-----------
		}
		else if(block == labelLegend)
		{
			//---------Enter your code here-----------
		}
		else if(block == listParmeters)
		{
			//---------Enter your code here-----------
		}
		else if(block == doublePara)
		{
			//---------Enter your code here-----------
		}
		else if(block == enumNoKeyinPara)
		{
			//---------Enter your code here-----------
		}
		else if(block == csysPos)
		{
			//---------Enter your code here-----------
		}
		else if(block == toggleSubtract)
		{
			//---------Enter your code here-----------
		}
		else if(block == togglePreview)
		{
			//---------Enter your code here-----------
		}
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYStandPart::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int TYStandPart::ok_cb()
{
	try
	{
		apply_cb();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYStandPart::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: cancel_Cb
//------------------------------------------------------------------------------
int TYStandPart::cancel_cb()
{
	try
	{
		//---- Enter your callback code here -----
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYStandPart::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: filter_cb
//------------------------------------------------------------------------------
int TYStandPart::filter_cb(NXOpen::BlockStyler::UIBlock*  block, NXOpen::TaggedObject* selectObject)
{
	return(UF_UI_SEL_ACCEPT);
}
