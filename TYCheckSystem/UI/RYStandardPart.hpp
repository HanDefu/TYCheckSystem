//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\NXDemo\all\application\RYStandardPart.hpp
//
//        This file was generated by the NX Block Styler
//        Created by: Administrator
//              Version: NX 10
//              Date: 10-11-2018  (Format: mm-dd-yyyy)
//              Time: 14:09
//
//==============================================================================

#ifndef RYSTANDARDPART_H_INCLUDED
#define RYSTANDARDPART_H_INCLUDED

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include <uf_defs.h>
#include <uf_ui_types.h>
#include <uf.h>
#include <uf_ui.h>
#include <uf_mtx.h>
#include <uf_part.h>
#include <uf_modl.h>
#include <uf_clone.h>
#include <uf_assem.h>
#include <uf_csys.h>
#include <uf_undo.h>
#include <uf_wave.h>
#include <uf_so.h>
#include <uf_modl_expressions.h>
#include <NXOpen/Part.hxx>
#include <NXOpen/PartCollection.hxx>
#include <iostream>
#include <NXOpen/Session.hxx>
#include <NXOpen/UI.hxx>
#include <NXOpen/NXMessageBox.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXException.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/BlockStyler_BlockDialog.hxx>
#include <NXOpen/BlockStyler_PropertyList.hxx>
#include <NXOpen/WCS.hxx>
#include <NXOpen/NXMatrix.hxx>
#include <NXOpen/NXMatrixCollection.hxx>
#include <NXOpen/CoordinateSystem.hxx>
#include <NXOpen/CoordinateSystemCollection.hxx>
#include <NXOpen/NXObjectManager.hxx>
#include "../Common/Com_UI.h"
#include "../Common/Com.h"
#include "../Tool/Excel/BasicExcel.hpp"
#include "../Common/StandardPartData.h"
//#include "sino_screw_comn.h"
#include "../Common/Com_UG.h"


//------------------------------------------------------------------------------
//Bit Option for Property: SnapPointTypesEnabled
//------------------------------------------------------------------------------
#define              SnapPointTypesEnabled_UserDefined (1 << 0);
#define                 SnapPointTypesEnabled_Inferred (1 << 1);
#define           SnapPointTypesEnabled_ScreenPosition (1 << 2);
#define                 SnapPointTypesEnabled_EndPoint (1 << 3);
#define                 SnapPointTypesEnabled_MidPoint (1 << 4);
#define             SnapPointTypesEnabled_ControlPoint (1 << 5);
#define             SnapPointTypesEnabled_Intersection (1 << 6);
#define                SnapPointTypesEnabled_ArcCenter (1 << 7);
#define            SnapPointTypesEnabled_QuadrantPoint (1 << 8);
#define            SnapPointTypesEnabled_ExistingPoint (1 << 9);
#define             SnapPointTypesEnabled_PointonCurve (1 <<10);
#define           SnapPointTypesEnabled_PointonSurface (1 <<11);
#define         SnapPointTypesEnabled_PointConstructor (1 <<12);
#define     SnapPointTypesEnabled_TwocurveIntersection (1 <<13);
#define             SnapPointTypesEnabled_TangentPoint (1 <<14);
#define                    SnapPointTypesEnabled_Poles (1 <<15);
#define         SnapPointTypesEnabled_BoundedGridPoint (1 <<16);
#define         SnapPointTypesEnabled_FacetVertexPoint (1 <<17);
//------------------------------------------------------------------------------
//Bit Option for Property: SnapPointTypesOnByDefault
//------------------------------------------------------------------------------
#define             SnapPointTypesOnByDefault_EndPoint (1 << 3);
#define             SnapPointTypesOnByDefault_MidPoint (1 << 4);
#define         SnapPointTypesOnByDefault_ControlPoint (1 << 5);
#define         SnapPointTypesOnByDefault_Intersection (1 << 6);
#define            SnapPointTypesOnByDefault_ArcCenter (1 << 7);
#define        SnapPointTypesOnByDefault_QuadrantPoint (1 << 8);
#define        SnapPointTypesOnByDefault_ExistingPoint (1 << 9);
#define         SnapPointTypesOnByDefault_PointonCurve (1 <<10);
#define       SnapPointTypesOnByDefault_PointonSurface (1 <<11);
#define     SnapPointTypesOnByDefault_PointConstructor (1 <<12);
#define     SnapPointTypesOnByDefault_BoundedGridPoint (1 <<16);
//------------------------------------------------------------------------------
//Bit Option for Property: SnapPointTypesOnByDefault
//------------------------------------------------------------------------------
#define          SnapPointTypesOnByDefault_UserDefined (1 << 0);
#define             SnapPointTypesOnByDefault_Inferred (1 << 1);
#define       SnapPointTypesOnByDefault_ScreenPosition (1 << 2);
#define SnapPointTypesOnByDefault_TwocurveIntersection (1 <<13);
#define         SnapPointTypesOnByDefault_TangentPoint (1 <<14);
#define                SnapPointTypesOnByDefault_Poles (1 <<15);
#define     SnapPointTypesOnByDefault_FacetVertexPoint (1 <<17);
//------------------------------------------------------------------------------
//Bit Option for Property: VisibleManipulatorHandles
//------------------------------------------------------------------------------
#define               VisibleManipulatorHandles_Origin (1 << 0);
#define           VisibleManipulatorHandles_TranslateX (1 << 1);
#define           VisibleManipulatorHandles_TranslateY (1 << 2);
#define           VisibleManipulatorHandles_TranslateZ (1 << 3);
#define              VisibleManipulatorHandles_RotateX (1 << 4);
#define              VisibleManipulatorHandles_RotateY (1 << 5);
#define              VisibleManipulatorHandles_RotateZ (1 << 6);
//------------------------------------------------------------------------------
//Bit Option for Property: EntityType
//------------------------------------------------------------------------------
#define                         EntityType_AllowBodies (1 << 6);
//------------------------------------------------------------------------------
//Bit Option for Property: BodyRules
//------------------------------------------------------------------------------
#define                           BodyRules_SingleBody (1 << 0);
#define                        BodyRules_FeatureBodies (1 << 1);
#define                        BodyRules_BodiesinGroup (1 << 2);
//------------------------------------------------------------------------------
// Namespaces needed for following template
//------------------------------------------------------------------------------
using namespace std;
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

extern int report( char *file, int line, char *call, int irc);

#ifndef UF_CALL
#define UF_CALL(X) (report( __FILE__, __LINE__, #X, (X)))
#endif

class DllExport RYStandardPart
{
    // class members
public:
    static Session *theSession;
    static UI *theUI;
    RYStandardPart();
    ~RYStandardPart();
    int Show();
    
    //----------------------- BlockStyler Callback Prototypes ---------------------
    // The following member function prototypes define the callbacks 
    // specified in your BlockStyler dialog.  The empty implementation
    // of these prototypes is provided in the RYStandardPart.cpp file. 
    // You are REQUIRED to write the implementation for these functions.
    //------------------------------------------------------------------------------
    void initialize_cb();
    void dialogShown_cb();
    int apply_cb();
    int ok_cb();
	int cancel_cb();
    int update_cb(NXOpen::BlockStyler::UIBlock* block);
    PropertyList* GetBlockProperties(const char *blockID);
	void UpdateExpUI( );
	void PrieviewAddSTD(int updateflag );
	void SetStdDefaultName();
    
    //int AddCallback (NXOpen::BlockStyler::ListBox* list_box);
    //int DeleteCallback(NXOpen::BlockStyler::ListBox* list_box);
private:
    const char* theDlxFileName;
    NXOpen::BlockStyler::BlockDialog* theDialog;
    NXOpen::BlockStyler::Group* group1;// Block type: Group
    NXOpen::BlockStyler::StringBlock* string_search;// Block type: String
    NXOpen::BlockStyler::Button* button_search;// Block type: Button
    NXOpen::BlockStyler::ListBox* list_search_result;// Block type: List Box
    NXOpen::BlockStyler::Group* group_edit;// Block type: Group
    NXOpen::BlockStyler::SelectObject* select_std_edit;// Block type: Selection
    NXOpen::BlockStyler::Group* group_type;// Block type: Group
    NXOpen::BlockStyler::Enumeration* enum_1;// Block type: Enumeration
    NXOpen::BlockStyler::Enumeration* enum_2;// Block type: Enumeration
    NXOpen::BlockStyler::Enumeration* enum_3;// Block type: Enumeration
    NXOpen::BlockStyler::Group* assyGroup;// Block type: Group
    NXOpen::BlockStyler::Enumeration* parentNode;// Block type: Enumeration
    NXOpen::BlockStyler::StringBlock* stdPartName;// Block type: String
    NXOpen::BlockStyler::Group* group_legend;// Block type: Group
    NXOpen::BlockStyler::Label* label_legend;// Block type: Label
    NXOpen::BlockStyler::Group* group_paras;// Block type: Group
    NXOpen::BlockStyler::ListBox* list_box0;// Block type: List Box
    NXOpen::BlockStyler::DoubleBlock* double_para;// Block type: Double
	NXOpen::BlockStyler::Enumeration* enum_nokeyinPara;// Block type: Enumeration
    NXOpen::BlockStyler::Group* group_pos;// Block type: Group
    NXOpen::BlockStyler::SpecifyPoint* point_pos;// Block type: Specify Point
    NXOpen::BlockStyler::SpecifyCSYS* coord_system_pos;// Block type: Specify Csys
    NXOpen::BlockStyler::SpecifyOrientation* manip_pos;// Block type: Specify Orientation
    NXOpen::BlockStyler::Group* group;// Block type: Group
    NXOpen::BlockStyler::Toggle* toggle_pocket;// Block type: Toggle
	NXOpen::BlockStyler::Toggle* toggle_preview;// Block type: Toggle
    NXOpen::BlockStyler::BodyCollector* bodyForcePock;// Block type: Body Collector
	tag_t stdPreviewInstance;
	logical newCopy;
	int first;
};
void RY_Standard_Part();
#endif //RYSTANDARDPART_H_INCLUDED
