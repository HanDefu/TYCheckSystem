//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Project\WetTang\Src\WeiTang\install\application\TYMirrorText.cpp
//
//        This file was generated by the NX Block Styler
//        Created by: Administrator
//              Version: NX 7
//              Date: 07-28-2019  (Format: mm-dd-yyyy)
//              Time: 18:56 (Format: hh-mm)
//
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "TYMirrorText.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(TYMirrorText::theSession) = NULL;
UI *(TYMirrorText::theUI) = NULL;

//------------------------------------------------------------------------------
// Declaration of global variables
//------------------------------------------------------------------------------
TYMirrorText *theTYMirrorText;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
TYMirrorText::TYMirrorText()
{
	try
	{
		// Initialize the NX Open C++ API environment
		TYMirrorText::theSession = NXOpen::Session::GetSession();
		TYMirrorText::theUI = UI::GetUI();
		theDialogName = "TYMirrorText.dlx";
		theDialog = TYMirrorText::theUI->CreateDialog(theDialogName.c_str());
		// Registration of callback functions
		theDialog->AddApplyHandler(make_callback(this, &TYMirrorText::apply_cb));
		theDialog->AddOkHandler(make_callback(this, &TYMirrorText::ok_cb));
		theDialog->AddUpdateHandler(make_callback(this, &TYMirrorText::update_cb));
		theDialog->AddCancelHandler(make_callback(this, &TYMirrorText::cancel_cb));
		theDialog->AddFilterHandler(make_callback(this, &TYMirrorText::filter_cb));
		theDialog->AddInitializeHandler(make_callback(this, &TYMirrorText::initialize_cb));
		theDialog->AddDialogShownHandler(make_callback(this, &TYMirrorText::dialogShown_cb));
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		throw;
	}
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
TYMirrorText::~TYMirrorText()
{
	if (theDialog != NULL)
	{
		delete theDialog;
		theDialog = NULL;
	}
}

int TYMirrorText::Show()
{
	try
	{
		theDialog->Show();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYMirrorText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//Method name: Show_TYMirrorText
//------------------------------------------------------------------------------
void TYMirrorText::Show_TYMirrorText()
{
	try
	{
		theTYMirrorText = new TYMirrorText();
		// The following method shows the dialog immediately
		theTYMirrorText->Show();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYMirrorText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	delete theTYMirrorText;
}


//------------------------------------------------------------------------------
//---------------------Block Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void TYMirrorText::initialize_cb()
{
	try
	{
		groupTextType = theDialog->TopBlock()->FindBlock("groupTextType");
		enumTextType = theDialog->TopBlock()->FindBlock("enumTextType");
		groupContents = theDialog->TopBlock()->FindBlock("groupContents");
		stringText1 = theDialog->TopBlock()->FindBlock("stringText1");
		stringText2 = theDialog->TopBlock()->FindBlock("stringText2");
		stringText3 = theDialog->TopBlock()->FindBlock("stringText3");
		stringText4 = theDialog->TopBlock()->FindBlock("stringText4");
		stringText5 = theDialog->TopBlock()->FindBlock("stringText5");
		stringText6 = theDialog->TopBlock()->FindBlock("stringText6");
		stringText7 = theDialog->TopBlock()->FindBlock("stringText7");
		stringText8 = theDialog->TopBlock()->FindBlock("stringText8");
		groupPosition = theDialog->TopBlock()->FindBlock("groupPosition");
		selectionBody = theDialog->TopBlock()->FindBlock("selectionBody");
		enumEdgePos = theDialog->TopBlock()->FindBlock("enumEdgePos");
		pointOrigin = theDialog->TopBlock()->FindBlock("pointOrigin");
		pointX = theDialog->TopBlock()->FindBlock("pointX");
		pointY = theDialog->TopBlock()->FindBlock("pointY");
		groupSetting = theDialog->TopBlock()->FindBlock("groupSetting");
		doubleTextHeight = theDialog->TopBlock()->FindBlock("doubleTextHeight");
		doubleEdgeDist = theDialog->TopBlock()->FindBlock("doubleEdgeDist");
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYMirrorText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void TYMirrorText::dialogShown_cb()
{
	try
	{
		//---- Enter your callback code here -----
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYMirrorText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int TYMirrorText::apply_cb()
{
	try
	{
		//---- Enter your callback code here -----
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYMirrorText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int TYMirrorText::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
	try
	{
		if(block == enumTextType)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringText1)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringText2)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringText3)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringText4)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringText5)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringText6)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringText7)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringText8)
		{
			//---------Enter your code here-----------
		}
		else if(block == selectionBody)
		{
			//---------Enter your code here-----------
		}
		else if(block == enumEdgePos)
		{
			//---------Enter your code here-----------
		}
		else if(block == pointOrigin)
		{
			//---------Enter your code here-----------
		}
		else if(block == pointX)
		{
			//---------Enter your code here-----------
		}
		else if(block == pointY)
		{
			//---------Enter your code here-----------
		}
		else if(block == doubleTextHeight)
		{
			//---------Enter your code here-----------
		}
		else if(block == doubleEdgeDist)
		{
			//---------Enter your code here-----------
		}
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYMirrorText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int TYMirrorText::ok_cb()
{
	try
	{
		apply_cb();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYMirrorText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: cancel_Cb
//------------------------------------------------------------------------------
int TYMirrorText::cancel_cb()
{
	try
	{
		//---- Enter your callback code here -----
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYMirrorText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: filter_cb
//------------------------------------------------------------------------------
int TYMirrorText::filter_cb(NXOpen::BlockStyler::UIBlock*  block, NXOpen::TaggedObject* selectObject)
{
	return(UF_UI_SEL_ACCEPT);
}
