//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Project\WetTang\Src\WeiTang\install\application\TYProperty.cpp
//
//        This file was generated by the NX Block Styler
//        Created by: Administrator
//              Version: NX 7
//              Date: 07-28-2019  (Format: mm-dd-yyyy)
//              Time: 18:57 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "TYProperty.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(TYProperty::theSession) = NULL;
UI *(TYProperty::theUI) = NULL;

//------------------------------------------------------------------------------
// Declaration of global variables
//------------------------------------------------------------------------------
TYProperty *theTYProperty;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
TYProperty::TYProperty()
{
	try
	{
		// Initialize the NX Open C++ API environment
		TYProperty::theSession = NXOpen::Session::GetSession();
		TYProperty::theUI = UI::GetUI();
		theDialogName = "TYProperty.dlx";
		theDialog = TYProperty::theUI->CreateDialog(theDialogName.c_str());
		// Registration of callback functions
		theDialog->AddApplyHandler(make_callback(this, &TYProperty::apply_cb));
		theDialog->AddOkHandler(make_callback(this, &TYProperty::ok_cb));
		theDialog->AddUpdateHandler(make_callback(this, &TYProperty::update_cb));
		theDialog->AddCancelHandler(make_callback(this, &TYProperty::cancel_cb));
		theDialog->AddFilterHandler(make_callback(this, &TYProperty::filter_cb));
		theDialog->AddInitializeHandler(make_callback(this, &TYProperty::initialize_cb));
		theDialog->AddDialogShownHandler(make_callback(this, &TYProperty::dialogShown_cb));

		m_customerSel = 0;
		m_firstNameSel = 0;
		m_secondNameSel = 0;
		m_materialSel = 0;
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		throw;
	}
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
TYProperty::~TYProperty()
{
	if (theDialog != NULL)
	{
		delete theDialog;
		theDialog = NULL;
	}
}

int TYProperty::Show()
{
	try
	{
		theDialog->Show();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYProperty::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Method name: Show_TYProperty
//------------------------------------------------------------------------------
void TYProperty::Show_TYProperty()
{
	try
	{
		theTYProperty = new TYProperty();
		// The following method shows the dialog immediately
		theTYProperty->Show();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYProperty::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	delete theTYProperty;
}

//------------------------------------------------------------------------------
//---------------------Block Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void TYProperty::initialize_cb()
{
	try
	{
		groupSelect = theDialog->TopBlock()->FindBlock("groupSelect");
		selectionBodies = theDialog->TopBlock()->FindBlock("selectionBodies");
		groupProperty = theDialog->TopBlock()->FindBlock("groupProperty");
		enumMainClass = theDialog->TopBlock()->FindBlock("enumMainClass");
		enumSubClass = theDialog->TopBlock()->FindBlock("enumSubClass");
		enumMaterial = theDialog->TopBlock()->FindBlock("enumMaterial");
		enumHeatProcess = theDialog->TopBlock()->FindBlock("enumHeatProcess");
		enumFaceProcess = theDialog->TopBlock()->FindBlock("enumFaceProcess");
		stringTechReq = theDialog->TopBlock()->FindBlock("stringTechReq");
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYProperty::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void TYProperty::dialogShown_cb()
{
	try
	{
		//---- Enter your callback code here -----
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYProperty::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int TYProperty::apply_cb()
{
	try
	{
		//---- Enter your callback code here -----
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYProperty::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int TYProperty::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
	try
	{
		if(block == selectionBodies)
		{
			//---------Enter your code here-----------
		}
		else if(block == enumMainClass)
		{
			//---------Enter your code here-----------
		}
		else if(block == enumSubClass)
		{
			//---------Enter your code here-----------
		}
		else if(block == enumMaterial)
		{
			//---------Enter your code here-----------
		}
		else if(block == enumHeatProcess)
		{
			//---------Enter your code here-----------
		}
		else if(block == enumFaceProcess)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringTechReq)
		{
			//---------Enter your code here-----------
		}
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYProperty::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int TYProperty::ok_cb()
{
	try
	{
		apply_cb();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYProperty::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: cancel_Cb
//------------------------------------------------------------------------------
int TYProperty::cancel_cb()
{
	try
	{
		//---- Enter your callback code here -----
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYProperty::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: filter_cb
//------------------------------------------------------------------------------
int TYProperty::filter_cb(NXOpen::BlockStyler::UIBlock*  block, NXOpen::TaggedObject* selectObject)
{
	return(UF_UI_SEL_ACCEPT);
}
