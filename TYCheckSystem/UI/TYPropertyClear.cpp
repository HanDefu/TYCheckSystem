//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Project\WetTang\Src\WeiTang\install\application\TYPropertyClear.cpp
//
//        This file was generated by the NX Block Styler
//        Created by: Administrator
//              Version: NX 7
//              Date: 07-28-2019  (Format: mm-dd-yyyy)
//              Time: 18:57 (Format: hh-mm)
//
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "TYPropertyClear.hpp"
#include "../Common/Com_UI.h"
#include "../Common/Com_UG.h"
#include <uf_attr.h>
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(TYPropertyClear::theSession) = NULL;
UI *(TYPropertyClear::theUI) = NULL;

//------------------------------------------------------------------------------
// Declaration of global variables
//------------------------------------------------------------------------------
TYPropertyClear *theTYPropertyClear;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
TYPropertyClear::TYPropertyClear()
{
	try
	{
		// Initialize the NX Open C++ API environment
		TYPropertyClear::theSession = NXOpen::Session::GetSession();
		TYPropertyClear::theUI = UI::GetUI();
		theDialogName = "TYPropertyClear.dlx";
		theDialog = TYPropertyClear::theUI->CreateDialog(theDialogName.c_str());
		// Registration of callback functions
		theDialog->AddApplyHandler(make_callback(this, &TYPropertyClear::apply_cb));
		theDialog->AddOkHandler(make_callback(this, &TYPropertyClear::ok_cb));
		theDialog->AddUpdateHandler(make_callback(this, &TYPropertyClear::update_cb));
		theDialog->AddCancelHandler(make_callback(this, &TYPropertyClear::cancel_cb));
		theDialog->AddFilterHandler(make_callback(this, &TYPropertyClear::filter_cb));
		theDialog->AddInitializeHandler(make_callback(this, &TYPropertyClear::initialize_cb));
		theDialog->AddDialogShownHandler(make_callback(this, &TYPropertyClear::dialogShown_cb));
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		throw;
	}
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
TYPropertyClear::~TYPropertyClear()
{
	if (theDialog != NULL)
	{
		delete theDialog;
		theDialog = NULL;
	}
}

int TYPropertyClear::Show()
{
	try
	{
		theDialog->Show();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYPropertyClear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
void TYPropertyClear::Show_TYPropertyClear()
{
	try
	{
		theTYPropertyClear = new TYPropertyClear();
		// The following method shows the dialog immediately
		theTYPropertyClear->Show();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYPropertyClear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	delete theTYPropertyClear;
}

//------------------------------------------------------------------------------
//---------------------Block Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void TYPropertyClear::initialize_cb()
{
	try
	{
		groupSelect = theDialog->TopBlock()->FindBlock("groupSelect");
		selectionBodies = theDialog->TopBlock()->FindBlock("selectionBodies");
		toggleClearAll = theDialog->TopBlock()->FindBlock("toggleClearAll");
		toggleClearColor = theDialog->TopBlock()->FindBlock("toggleClearColor");

		UI_SetSeletSolidBody(selectionBodies);
		
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYPropertyClear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void TYPropertyClear::dialogShown_cb()
{
	try
	{
		//---- Enter your callback code here -----
		UI_SetShow(selectionBodies,false);
		UI_LogicalSetValue(toggleClearAll,true);
		UI_LogicalSetValue(toggleClearColor,false);
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYPropertyClear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
}

int TYPropertyClear::ClearOldFaceColorAndProperty(tag_t faceBody)
{
	if(faceBody == 0)
		return -1;

	uf_list_p_t faceList;
	UF_MODL_ask_body_faces(faceBody, &faceList);

	vtag_t faces;
	TYCOM_AskListItemsAndDelete(faceList, faces);

	UF_OBJ_disp_props_t disp_props;
	UF_OBJ_ask_display_properties(faceBody, &disp_props);

	for(int i = 0; i < faces.size(); i++)
	{
		UF_OBJ_disp_props_t disp_props1;
		UF_OBJ_ask_display_properties(faces[i], &disp_props1);
		if(disp_props1.color == 21)
		{
			UF_ATTR_delete_all( faces[i] , UF_ATTR_any );
			UF_OBJ_set_color(faces[i] , disp_props.color);
		}
	}
	return 0;
}


int TYPropertyClear::ClearOldFaceColorAndProperty(tag_t faceBody, bool clearColor)
{
	if(clearColor)
	{
		UF_ATTR_delete_all( faceBody , UF_ATTR_any );
		ClearOldFaceColorAndProperty(faceBody);
	}
	else
	{
		int idx=0;
		int type=UF_ATTR_any ;
		char title[UF_ATTR_MAX_TITLE_LEN + 1]="";
		UF_ATTR_value_t value;
		//循环读取程序的属性
		UF_ATTR_cycle(faceBody,&idx,type,title,&value);
		char titles[128][64] = {"\0"};

		int num = 0;
		while (idx)
		{
			if(strcmp(title, ATTR_NORMAL_DIR_X_X) == 0 || 
				strcmp(title, ATTR_NORMAL_DIR_X_Y) == 0 ||
				strcmp(title, ATTR_NORMAL_DIR_X_Z) == 0 ||
				strcmp(title, ATTR_NORMAL_DIR_Y_X) == 0 ||
				strcmp(title, ATTR_NORMAL_DIR_Y_Y) == 0 ||
				strcmp(title, ATTR_NORMAL_DIR_Y_Z) == 0)
			{
				strcpy(title,"\0");
				continue;
			}

			strcpy(titles[num++],title);

			UF_ATTR_cycle(faceBody,&idx,type,title,&value);
		}
		UF_free(value.value.string);

		for (int i = 0; i < num; i++)
			UF_ATTR_delete(faceBody,UF_ATTR_any,titles[i]);
	}
	return 0;
}
//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int TYPropertyClear::apply_cb()
{
	try
	{
		bool clearAll =false;
		UI_LogicalGetValue(toggleClearAll, clearAll);

		bool clearColor =false;
		UI_LogicalGetValue(toggleClearColor, clearColor);

		if(!clearAll)
		{
			NXOpen::BlockStyler::PropertyList *  pAttr = NULL;
			//bodies
			pAttr = selectionBodies->GetProperties();
			std::vector<NXOpen::TaggedObject *> objsBodies = pAttr->GetTaggedObjectVector("SelectedObjects");

			for(int i = 0; i < objsBodies.size(); i++)
			{
				ClearOldFaceColorAndProperty(objsBodies[i]->Tag(),clearColor);
			}
			delete pAttr;
			pAttr = 0;
		}
		else
		{
			vtag_t bomBodies;
		    TYCOM_GetCurrentPartSolidBodies(bomBodies);

			for(int i = 0; i < bomBodies.size(); i++)
			{
				ClearOldFaceColorAndProperty(bomBodies[i],clearColor);
			}
		}
		
		
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYPropertyClear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int TYPropertyClear::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
	try
	{
		if(block == selectionBodies)
		{
			//---------Enter your code here-----------
		}
		else if(block == toggleClearAll)
		{
			bool clearAll =false;
			UI_LogicalGetValue(toggleClearAll, clearAll);
			UI_SetShow(selectionBodies,!clearAll);
		}
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYPropertyClear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int TYPropertyClear::ok_cb()
{
	try
	{
		apply_cb();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYPropertyClear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: cancel_Cb
//------------------------------------------------------------------------------
int TYPropertyClear::cancel_cb()
{
	try
	{
		//---- Enter your callback code here -----
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYPropertyClear::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: filter_cb
//------------------------------------------------------------------------------
int TYPropertyClear::filter_cb(NXOpen::BlockStyler::UIBlock*  block, NXOpen::TaggedObject* selectObject)
{
	return(UF_UI_SEL_ACCEPT);
}
