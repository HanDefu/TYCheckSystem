//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Project\WetTang\Src\WeiTang\install\application\TYHeavy.cpp
//
//        This file was generated by the NX Block Styler
//        Created by: Administrator
//              Version: NX 7
//              Date: 07-28-2019  (Format: mm-dd-yyyy)
//              Time: 18:56 (Format: hh-mm)
//
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "TYHeavy.hpp"
#include <uf_modl.h>
#include "../Common/Common_Function.h"
#include "../Common/Common_UI.h"
#include "../Common/Common_Function_UG.h"
#include "uf_assem.h"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(TYHeavy::theSession) = NULL;
UI *(TYHeavy::theUI) = NULL;

//------------------------------------------------------------------------------
// Declaration of global variables
//------------------------------------------------------------------------------
TYHeavy *theTYHeavy;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
TYHeavy::TYHeavy()
{
	try
	{
		// Initialize the NX Open C++ API environment
		TYHeavy::theSession = NXOpen::Session::GetSession();
		TYHeavy::theUI = UI::GetUI();
		theDialogName = "TYHeavy.dlx";
		theDialog = TYHeavy::theUI->CreateDialog(theDialogName.c_str());
		// Registration of callback functions
		theDialog->AddApplyHandler(make_callback(this, &TYHeavy::apply_cb));
		theDialog->AddOkHandler(make_callback(this, &TYHeavy::ok_cb));
		theDialog->AddUpdateHandler(make_callback(this, &TYHeavy::update_cb));
		theDialog->AddCancelHandler(make_callback(this, &TYHeavy::cancel_cb));
		theDialog->AddFilterHandler(make_callback(this, &TYHeavy::filter_cb));
		theDialog->AddInitializeHandler(make_callback(this, &TYHeavy::initialize_cb));
		theDialog->AddDialogShownHandler(make_callback(this, &TYHeavy::dialogShown_cb));
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		throw;
	}
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
TYHeavy::~TYHeavy()
{
	if (theDialog != NULL)
	{
		delete theDialog;
		theDialog = NULL;
	}
}


int TYHeavy::Show()
{
	try
	{
		theDialog->Show();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYHeavy::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Method name: Show_TYHeavy
//------------------------------------------------------------------------------
void TYHeavy::Show_TYHeavy()
{
	try
	{
		theTYHeavy = new TYHeavy();
		// The following method shows the dialog immediately
		theTYHeavy->Show();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYHeavy::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	delete theTYHeavy;
}

//------------------------------------------------------------------------------
//---------------------Block Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void TYHeavy::initialize_cb()
{
	try
	{
		groupSelect = theDialog->TopBlock()->FindBlock("groupSelect");
		selectionBodies = theDialog->TopBlock()->FindBlock("selectionBodies");
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYHeavy::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void TYHeavy::dialogShown_cb()
{
	try
	{
		//---- Enter your callback code here -----
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYHeavy::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int TYHeavy::apply_cb()
{
	try
	{
		//预处理 workpart
		std::vector<NXOpen::TaggedObject *> objs = UI_GetSelectObjects(selectionBodies);
		double sum = 0;
		int useless = 0;
		for(int i = 0; i < objs.size(); i++)
		{
			double gri = GetBodyGrid(objs[i]->Tag());
			if(gri > 0)
				sum = sum + gri;
			else
				useless++;
		}

		//Report
		logical response = 0;
		UF_UI_is_listing_window_open(&response);
		if(!response)
			UF_UI_open_listing_window();

		//UF_UI_write_listing_window("-----------------若宇称重报告-------------------\n\n\n");
		char str[1024]="";
		sprintf(str, "共选择实体:  %d个\n有效实体: %d个\n",objs.size(),objs.size()-useless);
		UF_UI_write_listing_window(str);
		sprintf(str, "共计重量:%.3f(KG)\n",sum);
		UF_UI_write_listing_window(str);
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYHeavy::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int TYHeavy::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
	try
	{
		if(block == selectionBodies)
		{
			//---------Enter your code here-----------
		}
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYHeavy::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int TYHeavy::ok_cb()
{
	try
	{
		apply_cb();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYHeavy::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: cancel_Cb
//------------------------------------------------------------------------------
int TYHeavy::cancel_cb()
{
	try
	{
		//---- Enter your callback code here -----
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYHeavy::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: filter_cb
//------------------------------------------------------------------------------
int TYHeavy::filter_cb(NXOpen::BlockStyler::UIBlock*  block, NXOpen::TaggedObject* selectObject)
{
	return(UF_UI_SEL_ACCEPT);
}

//获取实体重量
double TYHeavy::GetBodyGrid(tag_t body)
{
	if( UF_ASSEM_is_occurrence( body ))
	{
		body = UF_ASSEM_ask_prototype_of_occ ( body ) ;
	}

	if(body == 0)
		return -1;

	//默认铁的密度7.8g/cm3
	double grid = 7.8;
	char cgrid[32] = "";
	int has = USER_ask_obj_string_attr( body , TY_ATTR_DENSITY , cgrid );
	if(has)
	    grid = atof(cgrid);

	double volume = TYCOM_GetBodyVolume(body);
	
	double heavy = volume * grid;//g
	heavy = heavy/1000;//kg

	return heavy;
}
