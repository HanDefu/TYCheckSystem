//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Project\WetTang\Src\WeiTang\install\application\TYMirrorText.cpp
//
//        This file was generated by the NX Block Styler
//        Created by: Administrator
//              Version: NX 7
//              Date: 07-28-2019  (Format: mm-dd-yyyy)
//              Time: 18:56 (Format: hh-mm)
//
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "TYText.hpp"
#include <uf_part.h>
#include "../Common/Com_UI.h"
#include <uf_vec.h>
#include <uf_group.h>
#include "../Common/Com_UG.h"
#include <uf_assem.h>
#include <uf_csys.h>
#include "../Common/Com_Attribute.h"
#include <uf.h>

using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(TYText::theSession) = NULL;
UI *(TYText::theUI) = NULL;

//------------------------------------------------------------------------------
// Declaration of global variables
//------------------------------------------------------------------------------
TYText *theTYMirrorText;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
TYText::TYText()
{
	try
	{
		// Initialize the NX Open C++ API environment
		TYText::theSession = NXOpen::Session::GetSession();
		TYText::theUI = UI::GetUI();
		theDialogName = "TYText.dlx";
		theDialog = TYText::theUI->CreateDialog(theDialogName.c_str());
		// Registration of callback functions
		theDialog->AddApplyHandler(make_callback(this, &TYText::apply_cb));
		theDialog->AddOkHandler(make_callback(this, &TYText::ok_cb));
		theDialog->AddUpdateHandler(make_callback(this, &TYText::update_cb));
		theDialog->AddCancelHandler(make_callback(this, &TYText::cancel_cb));
		theDialog->AddFilterHandler(make_callback(this, &TYText::filter_cb));
		theDialog->AddInitializeHandler(make_callback(this, &TYText::initialize_cb));
		theDialog->AddDialogShownHandler(make_callback(this, &TYText::dialogShown_cb));

		
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		throw;
	}
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
TYText::~TYText()
{
	if (theDialog != NULL)
	{
		delete theDialog;
		theDialog = NULL;
	}
}

int TYText::Show()
{
	try
	{
		theDialog->Show();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//Method name: Show_TYMirrorText
//------------------------------------------------------------------------------
void TYText_Main()
{
	try
	{
		theTYMirrorText = new TYText();
		// The following method shows the dialog immediately
		theTYMirrorText->Show();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	delete theTYMirrorText;
}


//------------------------------------------------------------------------------
//---------------------Block Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void TYText::initialize_cb()
{
	try
	{
		groupTextType = theDialog->TopBlock()->FindBlock("groupTextType");
		enumTextType = theDialog->TopBlock()->FindBlock("enumTextType");
		groupContents = theDialog->TopBlock()->FindBlock("groupContents");
		integer1 = theDialog->TopBlock()->FindBlock("integer1");
		integer2 = theDialog->TopBlock()->FindBlock("integer2");
		stringText1 = theDialog->TopBlock()->FindBlock("stringText1");
		stringText2 = theDialog->TopBlock()->FindBlock("stringText2");
		stringText3 = theDialog->TopBlock()->FindBlock("stringText3");
		stringText4 = theDialog->TopBlock()->FindBlock("stringText4");
		stringText5 = theDialog->TopBlock()->FindBlock("stringText5");
		stringText6 = theDialog->TopBlock()->FindBlock("stringText6");
		stringText7 = theDialog->TopBlock()->FindBlock("stringText7");
		stringText8 = theDialog->TopBlock()->FindBlock("stringText8");
		groupPosition = theDialog->TopBlock()->FindBlock("groupPosition");
		selectionBody = theDialog->TopBlock()->FindBlock("selectionBody");
		enumEdgePos = theDialog->TopBlock()->FindBlock("enumEdgePos");
		pointOrigin = theDialog->TopBlock()->FindBlock("pointOrigin");
		pointX = theDialog->TopBlock()->FindBlock("pointX");
		pointY = theDialog->TopBlock()->FindBlock("pointY");
		toggleMirror = theDialog->TopBlock()->FindBlock("toggleMirror");
		mirrorPlane = theDialog->TopBlock()->FindBlock("mirrorPlane");

		groupSetting = theDialog->TopBlock()->FindBlock("groupSetting");
		doubleTextHeight = theDialog->TopBlock()->FindBlock("doubleTextHeight");
		doubleEdgeDist = theDialog->TopBlock()->FindBlock("doubleEdgeDist");

		m_text1 = 0;
		m_text2 = 0;
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void TYText::dialogShown_cb()
{
	try
	{
		//---- Enter your callback code here -----
		UI_LogicalSetValue(toggleMirror,false);
		UI_BlockSetShowStatus(mirrorPlane, false);

		UI_BlockSetShowStatus(enumEdgePos, false);

		
		UpdateShowStatus();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
}

//转换装配下的坐标到工作部件下的坐标
int TransformPnt(NXOpen::Point3d pnt, NXOpen::Point3d &outPnt)
{
	double ipt[3] = {pnt.X, pnt.Y, pnt.Z};
	double opt[3];

	UF_CSYS_map_point(UF_CSYS_ROOT_COORDS,ipt,UF_CSYS_WORK_COORDS,opt);
	outPnt.X = opt[0];
	outPnt.Y = opt[1];
	outPnt.Z = opt[2];

	return 0;
}

int TYText::GetStr1AndStr2(char *str1, char *str2)
{
	int sel = 0;
	UI_EnumGetCurrentSel(enumTextType,sel);

	int  value1=0, value2 = 0;
	char str[32]="";
    UI_IntGetValue(integer1, value1);
	UI_IntGetValue(integer2, value2);

	NXString nxstr;
	UI_StringGetValue(stringText1, nxstr);

	if(sel == 0 || sel == 1)
	{
        sprintf(str1, "%d", value1);
		return 1;
	}

	if(sel == 2 || sel == 3)
	{
		sprintf(str1, "%d", value1);
		sprintf(str2, "%d", value2);
		return 2;
	}

	if(sel == 4)
	{
		strcpy(str1, nxstr.getLocaleText());
		return 3;
	}

	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int TYText::apply_cb()
{
	try
	{
		//预处理 workpart
		tag_t oriWorkPart = UF_ASSEM_ask_work_part();
		std::vector<NXOpen::TaggedObject *> objs = UI_GetSelectObjects(selectionBody);
		tag_t partocc = UF_ASSEM_ask_part_occurrence(objs[0]->Tag());
		tag_t objPart = 0;
		if(partocc != 0)
			objPart = UF_ASSEM_ask_prototype_of_occ( partocc ) ;
		UF_ASSEM_set_work_part(objPart);

		//vtag_t oriSplines;
		//TYCOM_GetAllSplinesInPart( UF_ASSEM_ask_work_part(), oriSplines );

		//第一步导入文字
		tag_t group = 0;
		NXOpen::Point3d pntOri;
		NXOpen::Point3d pntX;
		NXOpen::Point3d pntY;

		UI_PointGetPoint(pointOrigin, pntOri);
		UI_PointGetPoint(pointX, pntX);
		UI_PointGetPoint(pointY, pntY);
	

		/*NXOpen::Point3d outPnt;
		TransformPnt(pntOri, pntOri);
		TransformPnt(pntX, pntX);
		TransformPnt(pntY, pntY);*/

		char str1[32] = "", str2[32] = "";
		int ret = GetStr1AndStr2(str1,str2);


		int sel = 0;
		UI_EnumGetCurrentSel(enumTextType,sel);

		ret = ImportText(str1, str2, sel == 0 || sel == 2 || sel == 4, sel <= 3, group,pntOri,pntX,pntY);
		if(ret != 0)
		{
			TYText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, "导入文字失败");
			return 0;
		}
		
		//替换引用极和（把spline和选择的body绑定）
		//AddTextToModelReference(/*group, */oriSplines, objs[0]->Tag());

		//如果需要处理镜像
		bool bMirror = false;
		UI_LogicalGetValue(toggleMirror,bMirror);
		if(bMirror)
		{
			//TYCOM_GetAllSplinesInPart( UF_ASSEM_ask_work_part(), oriSplines );
			tag_t plane = UI_GetPlaneTag(mirrorPlane);
			if(plane == 0)
				return 0;
			double plane_point[3]= {0.0, 0.0, 0.0}, plane_normal[3]= {0.0, 0.0, 0.0};
			UF_MODL_ask_plane(plane, plane_point, plane_normal);

			double pnt0[3] = {pntOri.X, pntOri.Y, pntOri.Z};
			double pnt1[3] = {pntX.X, pntX.Y, pntX.Z};
			double pnt2[3] = {pntY.X, pntY.Y, pntY.Z};
			double mirrorPntOri[3] = {0},mirrorPntX[3] = {0},mirrorPntY[3] = {0};
			TYCOM_MirrorPoint_Plane(pnt0, plane_point, plane_normal, mirrorPntOri);
			TYCOM_MirrorPoint_Plane(pnt1, plane_point, plane_normal, mirrorPntX);
			TYCOM_MirrorPoint_Plane(pnt2, plane_point, plane_normal, mirrorPntY);

			TYCOM_MirrorPoint_Point(mirrorPntX, mirrorPntOri, mirrorPntX);

			NXOpen::Point3d pntOriM(mirrorPntOri[0],mirrorPntOri[1],mirrorPntOri[2]);
			NXOpen::Point3d pntXM(mirrorPntX[0],mirrorPntX[1],mirrorPntX[2]);
			NXOpen::Point3d pntYM(mirrorPntY[0],mirrorPntY[1],mirrorPntY[2]);

			tag_t groupM = 0;
			ret = ImportText(str1, str2, sel == 0 || sel == 2 || sel == 4, sel <= 3,  groupM,pntOriM,pntXM,pntYM);
			if(ret != 0)
			{
				TYText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, "导入文字失败");
				return 0;
			}

			//替换引用极
			//AddTextToModelReference(/*groupM,*/ oriSplines, objs[0]->Tag());
		}

		UF_ASSEM_set_work_part(oriWorkPart);
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int TYText::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
	try
	{
		if(block == enumTextType)
		{
			UpdateShowStatus();
		}
		else if(block == stringText1)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringText2)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringText3)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringText4)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringText5)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringText6)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringText7)
		{
			//---------Enter your code here-----------
		}
		else if(block == stringText8)
		{
			//---------Enter your code here-----------
		}
		else if(block == selectionBody)
		{
			//---------Enter your code here-----------
		}
		else if(block == pointOrigin)
		{
			//---------Enter your code here-----------
		}
		else if(block == pointX)
		{
			//---------Enter your code here-----------
		}
		else if(block == pointY)
		{
			//---------Enter your code here-----------
		}
		else if(block == doubleTextHeight)
		{
			//---------Enter your code here-----------
		}
		else if(block == doubleEdgeDist)
		{
			//---------Enter your code here-----------
		}
		else if(block == toggleMirror)
		{
			//---------Enter your code here-----------
			bool isMi = false;
			UI_LogicalGetValue(toggleMirror, isMi);
			UI_BlockSetShowStatus(mirrorPlane, isMi);
		}
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int TYText::ok_cb()
{
	try
	{
		apply_cb();
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: cancel_Cb
//------------------------------------------------------------------------------
int TYText::cancel_cb()
{
	try
	{
		//---- Enter your callback code here -----
	}
	catch(exception& ex)
	{
		//---- Enter your exception handling code here -----
		TYText::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
	}
	return 0;
}

//------------------------------------------------------------------------------
//Callback Name: filter_cb
//------------------------------------------------------------------------------
int TYText::filter_cb(NXOpen::BlockStyler::UIBlock*  block, NXOpen::TaggedObject* selectObject)
{
	return(UF_UI_SEL_ACCEPT);
}


int TYText::GetPrtFileName(char prtFileName[UF_CFI_MAX_PATH_NAME_SIZE])
{
	int sel = 0;
	UI_EnumGetCurrentSel(enumTextType,sel);

	int sel1 = 0;//0 top 1 bottom
	UI_EnumGetCurrentSel(enumTextType,sel1);

	char *pathNameTemp = 0;
	UF_translate_variable("UGII_USER_DIR", &pathNameTemp);
	strcpy(prtFileName, pathNameTemp);
	if(sel == 0)
	    strcat(prtFileName, "\\application\\TextPart\\one.prt");
	if(sel == 1)
	    strcat(prtFileName, "\\application\\TextPart\\one_1.prt");
	if(sel == 2)
	    strcat(prtFileName, "\\application\\TextPart\\two.prt");
	if(sel == 3)
	    strcat(prtFileName, "\\application\\TextPart\\two_1.prt");

	return 0;
}

int TYText::ImportText(char * str1, //第一个但文字情况 和 自由的情况
					   char * str2,//只用于第二个情况 两个文字
					   bool bReverseY,//对于上边沿的需要reversey
					   bool bimport, //只有自由的情况不需要导入
					   tag_t &group, //导入后的group
					   NXOpen::Point3d pntOri//原点
					   ,NXOpen::Point3d pntX, //X方向点
					   NXOpen::Point3d pntY)//y方向点
{
	if(str1 == 0 || strlen(str1) == 0)
		return -1;

	double dest_csys[6] = {pntX.X - pntOri.X, pntX.Y - pntOri.Y, pntX.Z - pntOri.Z,
		pntY.X - pntOri.X, pntY.Y - pntOri.Y, pntY.Z - pntOri.Z};

	//计算目标点
	double ydir[3] = {pntY.X - pntOri.X, pntY.Y - pntOri.Y, pntY.Z - pntOri.Z};
	double magnitude = 0;
	double unit_vec_Y[3] = {0,0,0};
	UF_VEC3_unitize(ydir, 0.0254,&magnitude, unit_vec_Y);
	double dest_point1[3] = {pntOri.X, pntOri.Y, pntOri.Z};
	double dest_point[3] = {0,0,0};

	double distance = 0;
    UI_DoubleGetValue(doubleEdgeDist, distance);
	UF_VEC3_affine_comb(dest_point1, distance, unit_vec_Y, dest_point);

	if(bimport)//自由输入的不需要import
	{
		char prtFileName[UF_CFI_MAX_PATH_NAME_SIZE] = "\0";
		GetPrtFileName(prtFileName);

		UF_import_part_modes_t mode;
		mode.layer_mode = 0;
		mode.group_mode = 1;
		mode.csys_mode = 0;
		mode.plist_mode = 0;
		mode.view_mode = 0;
		mode.cam_mode = 0;
		mode.use_search_dirs = 0;
		int ret = UF_PART_import(prtFileName, &mode, dest_csys, dest_point, 1.0, &group);
	}


	if (bReverseY)
	    UF_VEC3_negate(&(dest_csys[3]), &(dest_csys[3]));

	UF_VEC3_affine_comb(dest_point, 6, unit_vec_Y, dest_point);

    TYText_Main2_ForBaiKeXian(str1, dest_point, dest_csys, 5);

	if(str2 != 0 && strlen(str2) > 0)
	{
		UF_VEC3_affine_comb(dest_point, 7.5, unit_vec_Y, dest_point);
		TYText_Main2_ForBaiKeXian(str2, dest_point, dest_csys, 5);
	}
	
	
	return 0;
}

int TYText::AddTextToModelReference(vtag_t &oriSplines, tag_t body)
{
	UF_MODL_update();

	tag_t part = UF_ASSEM_ask_work_part();
	vtag_t curSplines;
	TYCOM_GetAllSplinesInPart( part, curSplines );
	vtag_t newSplnes;
	for(int i = 0; i < curSplines.size(); i++)
	{
		if(vFind(oriSplines, curSplines[i]) == -1)
			newSplnes.push_back(curSplines[i]);
	}

	//TYCOM_AddObjectToReferenceSet(part, newSplnes, "Model");


	char *handle = UF_TAG_ask_handle_of_tag(TYCOM_Prototype(body));
	//for(int i = 0; i < newSplnes.size(); i++)
		//BYD_set_OBJ_string_attr( RY_Prototype(newSplnes[i]), ATTR_RY_TEXT_SPLINE_BODY_HANDLE, handle );

	UF_free(handle);

	return 0;
}

int TYText::UpdateShowStatus()
{
	int sel;
	UI_EnumGetCurrentSel(enumTextType, sel);
	if(sel == 0 || sel == 1)
	{
		UI_BlockSetShowStatus(integer1,1);
		UI_BlockSetShowStatus(integer2,0);
		UI_BlockSetShowStatus(stringText1,0);

		UI_BlockSetLabel(integer1, "间隙");

	}

	if(sel == 2 || sel == 3)
	{
		UI_BlockSetShowStatus(integer1,1);
		UI_BlockSetShowStatus(integer2,1);
		UI_BlockSetShowStatus(stringText1,0);

		UI_BlockSetLabel(integer1, "间隙");
		UI_BlockSetLabel(integer2, "面差");
	}

	if(sel == 4 )
	{
		UI_BlockSetShowStatus(integer1,0);
		UI_BlockSetShowStatus(integer2,0);
		UI_BlockSetShowStatus(stringText1,1);

		UI_BlockSetLabel(stringText1, "字符");
	}
	return 0;
}
