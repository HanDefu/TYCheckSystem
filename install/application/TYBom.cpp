//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Projects\WeiTang\Src\TYCheckSystem\install\application\TYBom.cpp
//
//        This file was generated by the NX Block Styler
//        Created by: Administrator
//              Version: NX 7
//              Date: 10-08-2019  (Format: mm-dd-yyyy)
//              Time: 16:02 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "TYBom.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(TYBom::theSession) = NULL;
UI *(TYBom::theUI) = NULL;

//------------------------------------------------------------------------------
// Declaration of global variables
//------------------------------------------------------------------------------
TYBom *theTYBom;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
TYBom::TYBom()
{
    try
    {
        // Initialize the NX Open C++ API environment
        TYBom::theSession = NXOpen::Session::GetSession();
        TYBom::theUI = UI::GetUI();
        theDialogName = "TYBom.dlx";
        theDialog = TYBom::theUI->CreateDialog(theDialogName.c_str());
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &TYBom::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &TYBom::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &TYBom::update_cb));
        theDialog->AddFilterHandler(make_callback(this, &TYBom::filter_cb));
        theDialog->AddInitializeHandler(make_callback(this, &TYBom::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &TYBom::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
TYBom::~TYBom()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Remove the following conditional definitions:
//
//                a) #if USER_EXIT
//                    #endif//USER_EXIT
//        2) Create the Shared Library -- Refer "Block Styler programmer's guide"
//        3) Invoke the Shared Library through File->Execute->NX Open menu.
//
//    2. THROUGH CALLBACK OF ANOTHER DIALOG
//
//        1) Remove the following conditional definition:
//             #if CALLBACK
//             #endif//CALLBACK
//        2) Call the following line of code from where ever you want to lauch this dialog.
//             TYBom->Show_TYBom();
//        3) Integrate this file with your main application file.
//
//------------------------------------------------------------------------------
#if USER_EXIT
    extern "C" DllExport void  ufusr(char *param, int *retcod, int param_len)
    {
        try
        {
            theTYBom = new TYBom();
            // The following method shows the dialog immediately
            theTYBom->Show();
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TYBom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        delete theTYBom;
    }
    
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
    extern "C" DllExport int ufusr_ask_unload()
    {
        //return (int)Session::LibraryUnloadOptionExplicitly;
        return (int)Session::LibraryUnloadOptionImmediately;
        //return (int)Session::LibraryUnloadOptionAtTermination;
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    extern "C" DllExport void ufusr_cleanup(void)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TYBom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
    }
#endif//USER_EXIT
    
    int TYBom::Show()
    {
        try
        {
            theDialog->Show();
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TYBom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        return 0;
    }
    
#if CALLBACK
    //------------------------------------------------------------------------------
    //Method name: Show_TYBom
    //------------------------------------------------------------------------------
    void TYBom::Show_TYBom()
    {
        try
        {
            theTYBom = new TYBom();
            // The following method shows the dialog immediately
            theTYBom->Show();
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TYBom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        delete theTYBom;
    }
#endif//CALLBACK
    
    //------------------------------------------------------------------------------
    //---------------------Block Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    void TYBom::initialize_cb()
    {
        try
        {
            group0 = theDialog->TopBlock()->FindBlock("group0");
            selectionBodies = theDialog->TopBlock()->FindBlock("selectionBodies");
            toggleAll = theDialog->TopBlock()->FindBlock("toggleAll");
            group = theDialog->TopBlock()->FindBlock("group");
            stringPathName = theDialog->TopBlock()->FindBlock("stringPathName");
            buttonSelect = theDialog->TopBlock()->FindBlock("buttonSelect");
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TYBom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    void TYBom::dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TYBom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    int TYBom::apply_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TYBom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    int TYBom::update_cb(NXOpen::BlockStyler::UIBlock* block)
    {
        try
        {
            if(block == selectionBodies)
            {
            //---------Enter your code here-----------
            }
            else if(block == toggleAll)
            {
            //---------Enter your code here-----------
            }
            else if(block == stringPathName)
            {
            //---------Enter your code here-----------
            }
            else if(block == buttonSelect)
            {
            //---------Enter your code here-----------
            }
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TYBom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    int TYBom::ok_cb()
    {
        try
        {
            apply_cb();
        }
        catch(exception& ex)
        {
            //---- Enter your exception handling code here -----
            TYBom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: filter_cb
    //------------------------------------------------------------------------------
    int TYBom::filter_cb(NXOpen::BlockStyler::UIBlock*  block, NXOpen::TaggedObject* selectObject)
    {
        return(UF_UI_SEL_ACCEPT);
    }
